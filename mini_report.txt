# bt_web

Проект написан для дипломной работы и по заказу для тату-студии Bjus Калининград.

Немного о студии для понимания:

	БЬЮСЬ - это объединение тату-художников. 
	Они работают, в первую очередь, как студия, но в то же время сотрудничают с мастерами, для которых татуировка - хобби 
	Помимо татуировок они участвуют и организуют различные творческие ивенты: ярмарки, барахолки, коллажные встречи, выставки и др.
	Ребята из Бьюсь комьюнити занимаются не только тату: роспись стен, нейл арт, аэрография, диджитал дизайн, геймдев, музыка и многим другим



В проекте я использовал:
- python 3.12
- Django 5.1.1
- PostgreSQL 16
- aiogram 3.10.0
- асинхронную функцию для связки с тг ботом для отправки сообщения в чат группу сотрудников записи на сеанс от пользователя
	* async - позволяет запускать операции параллельно, не дожидаясь выполнения последовательности, то есть выполняется код асинхронный на заднем фоне.
- Bootstrap 5.3.3


Общее на всех страницах:
- простой и минималистичный дизайн по требованию заказчика
- шапка страниц
- карточки на правой части страниц с рекламой, или быстрыми новостями
- измененный скролл бар
- footer со всей нужной информацией, без лишнего.
- css оформление под разные виды устройств
- у всех карточек, кроме сайдбара, есть модальные окна, которые открываются при нажатие соответственной им кнопки.
в них отображается вся информация. Так же при открытом модальном окне, всё что за ним с эффектом blur
- у карточек товаров, тату и мастеров есть карусели изображений с индикаторами
- фон страниц обычный градиент


Главная страница:

На странице "Главная" я реализовал:
- удобную навигационную панель
- главную карусель с изображениями с валидацией по пикселям и с эффектом паровоза
- новостные карточки с соотношением 1/1 (квадратные)
- пагинацию для карточек, которая обновляет сами карточки по AJAX-запросу.
	* AJAX-запрос - это метод JavaScript, который передает данные на сервер без перезагрузки страницы.

Страница "Адрес":
- Адрес и контактная информации о тату-студии
- Яндекс карта (на мобильных устройствах реализована кнопка, которая открывает Яндекс Карту)


Страница "Татуировки":

- две вкладки: Тату галерея и Мастера
- в Тату Галерея есть дроп-меню с категориями.
- общее в вкладках - это карточки с соотношением 1/1.5
- карточки тату соединены не только с категориями, но и с мастерами.
- для каждой вкладки своя пагинация с AJAX-запросами.


Страница "Запись на сеанс":
- форма записи, где:
	- "Дата" с дроп-меню свободными датами, которые устанавливает админ в Джанго админке
	- "Время" с дроп-меню свободного времени для определенной даты
	- "Имя"
	- "Контакт"
При нажатие на кнопку "Записаться" открывается модальное окно, где пользователь может проверить заполненную им информацию в форме,
так же подтвердить, что всё верно и что ему есть 18 лет.
После подтвержений открывается следующее модальное окно, где говорится пользователю, что всё прошло успешно, так же активируется асинхронная функция send_to_tg,
которая отправляет заполненную информацию формы в чат группу сотрудников в телеграме, через телеграм бота, написанного на aiogram==3.10.0, так же раннее по
заказу этой же тату-студии.


Страница "Магазин":
- карточки с продуктами с соотношением 1/1.5
- реализованная логика Скидок для товаров.
- карточки с товаром соединены с продавцами (тут не стал делать форейнкей с мастерами, в описании самой студии можно понять почему, а именно 
что Bjus Tattoo - творческая среда)
- пагинация с AJAX-запросами для карточек товаров


## Остальное:

Джанго-админка:

	Для неё, а именно для определенных моделей, я сделал отдельные шаблоны html, которые наследуют оригинальный стандартный шаблон,
	в которых добавлены блоки с подсказками.
	Больше ничего не менял, так как сайт простой и минималистичный, лишнего, как и везде, ничего нет.
	В стандартой Джанго-админке и так всё понятно и просто.
	Войти в неё можно либо через адресную строку, либо через <a> кнопку в footer'е


Подмечу, что данное приложение/сайт еще не имеет финального вида, то есть всё до сего дня тестируется и меняется.
В скором времени, приложение перенесем с локального сервера на облачный (ОС Убунту или Дебиан) для дальнейших тестов, с испольсованием CI/CD GitHub Actions;
запуск будет с использованием pm2; для домена SSL-сертификат будет написан скрипт - Let’s crypt.



Если задаваться вопросом, что лучше: Django, FastAPI или Flask, то я буду исходить из наблюдений других програмистов:

- Если сравнивать их скорость, то на разных тестах указано, что на первом месте FastAPI, потом Flask, и дальше Django

Для чего можно использовать данные библиотеки:

1) Flask:

- Flask удобен будет для создания маленького приложения. Я, например, использовал Flask, чтобы создать минимальное приложение для связки с тг-ботом для того,
чтобы отслеживать через, например UptimeRobot, включен или нет бот.
Для создания проекта на Flask потребуется написание намного меньше кода, нежели на Django

2) FastAPI:

- Почему любят FastAPI: удобная документация, асинхронность, удобно тестировать GET-/POST- запросы
- быстрый и удобен в работе

3) Django:

- на Django можно сделать, наверное, абсолютно всё, но бесполезно и не удобно писать на нём простые приложения


В заключение мини-иследования, я бы подвел такой итог, что победную медаль получает FastAPI, но и Django не сильно отстает.